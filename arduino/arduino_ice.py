# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.6
#
# <auto-generated>
#
# Generated from file `arduino.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

_M_Demo._t_arduinointerface = IcePy.defineValue('::Demo::arduinointerface', Ice.Value, -1, (), False, True, None, ())

if 'arduinointerfacePrx' not in _M_Demo.__dict__:
    _M_Demo.arduinointerfacePrx = Ice.createTempClass()
    class arduinointerfacePrx(Ice.ObjectPrx):

        def left(self, context=None):
            return _M_Demo.arduinointerface._op_left.invoke(self, ((), context))

        def leftAsync(self, context=None):
            return _M_Demo.arduinointerface._op_left.invokeAsync(self, ((), context))

        def begin_left(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.arduinointerface._op_left.begin(self, ((), _response, _ex, _sent, context))

        def end_left(self, _r):
            return _M_Demo.arduinointerface._op_left.end(self, _r)

        def center(self, context=None):
            return _M_Demo.arduinointerface._op_center.invoke(self, ((), context))

        def centerAsync(self, context=None):
            return _M_Demo.arduinointerface._op_center.invokeAsync(self, ((), context))

        def begin_center(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.arduinointerface._op_center.begin(self, ((), _response, _ex, _sent, context))

        def end_center(self, _r):
            return _M_Demo.arduinointerface._op_center.end(self, _r)

        def right(self, context=None):
            return _M_Demo.arduinointerface._op_right.invoke(self, ((), context))

        def rightAsync(self, context=None):
            return _M_Demo.arduinointerface._op_right.invokeAsync(self, ((), context))

        def begin_right(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.arduinointerface._op_right.begin(self, ((), _response, _ex, _sent, context))

        def end_right(self, _r):
            return _M_Demo.arduinointerface._op_right.end(self, _r)

        def leftwithtime(self, time, context=None):
            return _M_Demo.arduinointerface._op_leftwithtime.invoke(self, ((time, ), context))

        def leftwithtimeAsync(self, time, context=None):
            return _M_Demo.arduinointerface._op_leftwithtime.invokeAsync(self, ((time, ), context))

        def begin_leftwithtime(self, time, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.arduinointerface._op_leftwithtime.begin(self, ((time, ), _response, _ex, _sent, context))

        def end_leftwithtime(self, _r):
            return _M_Demo.arduinointerface._op_leftwithtime.end(self, _r)

        def centerwithtime(self, time, context=None):
            return _M_Demo.arduinointerface._op_centerwithtime.invoke(self, ((time, ), context))

        def centerwithtimeAsync(self, time, context=None):
            return _M_Demo.arduinointerface._op_centerwithtime.invokeAsync(self, ((time, ), context))

        def begin_centerwithtime(self, time, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.arduinointerface._op_centerwithtime.begin(self, ((time, ), _response, _ex, _sent, context))

        def end_centerwithtime(self, _r):
            return _M_Demo.arduinointerface._op_centerwithtime.end(self, _r)

        def rightwithtime(self, time, context=None):
            return _M_Demo.arduinointerface._op_rightwithtime.invoke(self, ((time, ), context))

        def rightwithtimeAsync(self, time, context=None):
            return _M_Demo.arduinointerface._op_rightwithtime.invokeAsync(self, ((time, ), context))

        def begin_rightwithtime(self, time, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.arduinointerface._op_rightwithtime.begin(self, ((time, ), _response, _ex, _sent, context))

        def end_rightwithtime(self, _r):
            return _M_Demo.arduinointerface._op_rightwithtime.end(self, _r)

        def stop(self, context=None):
            return _M_Demo.arduinointerface._op_stop.invoke(self, ((), context))

        def stopAsync(self, context=None):
            return _M_Demo.arduinointerface._op_stop.invokeAsync(self, ((), context))

        def begin_stop(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.arduinointerface._op_stop.begin(self, ((), _response, _ex, _sent, context))

        def end_stop(self, _r):
            return _M_Demo.arduinointerface._op_stop.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.arduinointerfacePrx.ice_checkedCast(proxy, '::Demo::arduinointerface', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.arduinointerfacePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::arduinointerface'
    _M_Demo._t_arduinointerfacePrx = IcePy.defineProxy('::Demo::arduinointerface', arduinointerfacePrx)

    _M_Demo.arduinointerfacePrx = arduinointerfacePrx
    del arduinointerfacePrx

    _M_Demo.arduinointerface = Ice.createTempClass()
    class arduinointerface(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::arduinointerface', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::arduinointerface'

        @staticmethod
        def ice_staticId():
            return '::Demo::arduinointerface'

        def left(self, current=None):
            raise NotImplementedError("servant method 'left' not implemented")

        def center(self, current=None):
            raise NotImplementedError("servant method 'center' not implemented")

        def right(self, current=None):
            raise NotImplementedError("servant method 'right' not implemented")

        def leftwithtime(self, time, current=None):
            raise NotImplementedError("servant method 'leftwithtime' not implemented")

        def centerwithtime(self, time, current=None):
            raise NotImplementedError("servant method 'centerwithtime' not implemented")

        def rightwithtime(self, time, current=None):
            raise NotImplementedError("servant method 'rightwithtime' not implemented")

        def stop(self, current=None):
            raise NotImplementedError("servant method 'stop' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_arduinointerfaceDisp)

        __repr__ = __str__

    _M_Demo._t_arduinointerfaceDisp = IcePy.defineClass('::Demo::arduinointerface', arduinointerface, (), None, ())
    arduinointerface._ice_type = _M_Demo._t_arduinointerfaceDisp

    arduinointerface._op_left = IcePy.Operation('left', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    arduinointerface._op_center = IcePy.Operation('center', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    arduinointerface._op_right = IcePy.Operation('right', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    arduinointerface._op_leftwithtime = IcePy.Operation('leftwithtime', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    arduinointerface._op_centerwithtime = IcePy.Operation('centerwithtime', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    arduinointerface._op_rightwithtime = IcePy.Operation('rightwithtime', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, ())
    arduinointerface._op_stop = IcePy.Operation('stop', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Demo.arduinointerface = arduinointerface
    del arduinointerface

# End of module Demo
