# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `helloworld.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module test
_M_test = Ice.openModule('test')
__name__ = 'test'

_M_test._t_printer = IcePy.defineValue('::test::printer', Ice.Value, -1, (), False, True, None, ())

if 'printerPrx' not in _M_test.__dict__:
    _M_test.printerPrx = Ice.createTempClass()
    class printerPrx(Ice.ObjectPrx):

        def printstring(self, s, context=None):
            return _M_test.printer._op_printstring.invoke(self, ((s, ), context))

        def printstringAsync(self, s, context=None):
            return _M_test.printer._op_printstring.invokeAsync(self, ((s, ), context))

        def begin_printstring(self, s, _response=None, _ex=None, _sent=None, context=None):
            return _M_test.printer._op_printstring.begin(self, ((s, ), _response, _ex, _sent, context))

        def end_printstring(self, _r):
            return _M_test.printer._op_printstring.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_test.printerPrx.ice_checkedCast(proxy, '::test::printer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_test.printerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::test::printer'
    _M_test._t_printerPrx = IcePy.defineProxy('::test::printer', printerPrx)

    _M_test.printerPrx = printerPrx
    del printerPrx

    _M_test.printer = Ice.createTempClass()
    class printer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::test::printer')

        def ice_id(self, current=None):
            return '::test::printer'

        @staticmethod
        def ice_staticId():
            return '::test::printer'

        def printstring(self, s, current=None):
            raise NotImplementedError("servant method 'printstring' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_test._t_printerDisp)

        __repr__ = __str__

    _M_test._t_printerDisp = IcePy.defineClass('::test::printer', printer, (), None, ())
    printer._ice_type = _M_test._t_printerDisp

    printer._op_printstring = IcePy.Operation('printstring', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_test.printer = printer
    del printer

# End of module test
