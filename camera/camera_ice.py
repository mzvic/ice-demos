# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.6
#
# <auto-generated>
#
# Generated from file `camera.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

_M_Demo._t_video = IcePy.defineValue('::Demo::video', Ice.Value, -1, (), False, True, None, ())

if 'videoPrx' not in _M_Demo.__dict__:
    _M_Demo.videoPrx = Ice.createTempClass()
    class videoPrx(Ice.ObjectPrx):

        def takephoto(self, context=None):
            return _M_Demo.video._op_takephoto.invoke(self, ((), context))

        def takephotoAsync(self, context=None):
            return _M_Demo.video._op_takephoto.invokeAsync(self, ((), context))

        def begin_takephoto(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.video._op_takephoto.begin(self, ((), _response, _ex, _sent, context))

        def end_takephoto(self, _r):
            return _M_Demo.video._op_takephoto.end(self, _r)

        def shutdown(self, context=None):
            return _M_Demo.video._op_shutdown.invoke(self, ((), context))

        def shutdownAsync(self, context=None):
            return _M_Demo.video._op_shutdown.invokeAsync(self, ((), context))

        def begin_shutdown(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.video._op_shutdown.begin(self, ((), _response, _ex, _sent, context))

        def end_shutdown(self, _r):
            return _M_Demo.video._op_shutdown.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.videoPrx.ice_checkedCast(proxy, '::Demo::video', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.videoPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::video'
    _M_Demo._t_videoPrx = IcePy.defineProxy('::Demo::video', videoPrx)

    _M_Demo.videoPrx = videoPrx
    del videoPrx

    _M_Demo.video = Ice.createTempClass()
    class video(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::video', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::video'

        @staticmethod
        def ice_staticId():
            return '::Demo::video'

        def takephoto(self, current=None):
            raise NotImplementedError("servant method 'takephoto' not implemented")

        def shutdown(self, current=None):
            raise NotImplementedError("servant method 'shutdown' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_videoDisp)

        __repr__ = __str__

    _M_Demo._t_videoDisp = IcePy.defineClass('::Demo::video', video, (), None, ())
    video._ice_type = _M_Demo._t_videoDisp

    video._op_takephoto = IcePy.Operation('takephoto', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    video._op_shutdown = IcePy.Operation('shutdown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Demo.video = video
    del video

# End of module Demo
